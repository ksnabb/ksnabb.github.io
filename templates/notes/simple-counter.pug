style.
  .app {
    border: 1px solid #f5f5f5;
    padding: 10px;
    text-align: center;
  }

a(href="/") back

h1 Simple Counter

p.
  I've created a simple counter just like the one you usually see in examples when reading about
  webframeworks like React, Reagent, Elm or whatever framework.

p.
  I decided to do this by using pure HTML and JavaScript. The reasoning being not more then experimentation
  and maybe answer to myself on why these frameworks are needed.

p tl;dr below is the counter app.

include ../components/simple-counter.pug

h2 The Events

p.
  A natural theme in many frameworks is to connect elements in the UI to be reactive on state changes. A common
  pattern to achieve this is to subscribe to state change events. For this we need a publish subscribe kind of
  functionality.

p Below you can see one pure JavaScript impementation of publish subscribe.

script(src="//gist.github.com/ksnabb/271f4a7367b4f5571571c9a7a7ea6ecf.js?file=pubsub.js")

h2 The State

p The state will use the above pubSub to dispatch events on state changes.

script(src="//gist.github.com/ksnabb/271f4a7367b4f5571571c9a7a7ea6ecf.js?file=state.js")

h2 The View

p.
  The view can then be setup using the pubSub and the state. For connecting event listeners we can use standard
  DOM functions and manipulation.

script(src="//gist.github.com/ksnabb/271f4a7367b4f5571571c9a7a7ea6ecf.js?file=view.js")

p.
  By just modifying the content of the paragraph in the click event listener we could have done this using only
  3 lines of JavaScript code. The pubsub and the state handling does give the application some more structure
  and a promise to handle larger more complex frontends.





